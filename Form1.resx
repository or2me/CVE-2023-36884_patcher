<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARUXAAEVFwABFRcALRUXALUVFwGBFRcCdRUXAykVF
        wOlFRcD5RUXA+UVFwOlFRcDKRUXAnUVFwGBFRcAtRUXAC0VFwABFRcAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVFwABFRcAGRUXAQEVFwIxFRcDXRUXA+kVF
        wP1FRcD9RUXA/kVFwP5FRcD+RUXA/kVFwP1FRcD9RUXA+kVFwNdFRcCMRUXAQEVFwAZFRcAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVFwABFRcAARUXAIUVFwIZFRcDdRUXA/0VF
        wP9FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/0VFwP9FRcDdRUXAhkVF
        wCJFRcAARUXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFRcAARUXAAUVFwDtFRcC5RUXA+UVF
        wP9FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP9FRcD5RUXAuUVFwDtFRcABRUXAAAAAAAAAAAAAAAAAAAAAAAAAAAAARUXAAEVFwAFFRcBFRUXA0EVF
        wP5FRcD/RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP9FRcD+RUXAz0VFwEVFRcABRUXAAAAAAAAAAAAAAAAAAAAAAABFRcAARUXAOkVF
        wM5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXAzkVFwDtFRcAAAAAAAAAAAAAAAAAARUXAAEVF
        wCFFRcC5RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXAukVFwCJFRcAAAAAAAEVF
        wABFRcAFRUXAhkVFwPpFRcD/RUXA/kREwP5DQ7/+RETA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RETA/kNDv/5ERMD+RUXA/kVFwP9FRcD6RUXAhkVF
        wAVFRcAARUXAAEVFwEBFRcDcRUXA/0VFwP5ERMD+UFDE/mZmy/5VVcX+RES//kVFwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5SUsT+ZWXL/lJSxP5ERMD+RUXA/kVF
        wP9FRcDdRUXAQEVFwABFRcALRUXAjEVFwP9FRcD+RUXA/kdHwf6amt3/6+v4/7q66P9dXcj+Q0O//kVF
        wP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RkbA/qGh3/7o6Pf/oKDf/0lJ
        wf5FRcD+RUXA/kVFwP9FRcCMRUXAC0VFwC1FRcDXRUXA/0VFwP5CQr/+aWnM/t7e9P//////+/v+/729
        6f9cXMj+Q0O//kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5GRsD+srLl//7+
        ///i4vX/bW3O/kJCv/5FRcD+RUXA/0VFwNdFRcAtRUXAYUVFwPpFRcD+RUXA/kVFwP6Wltv+/Pz+//39
        /v/+/v//+/v+/7u76P9ZWcf+Q0O//kVFwP5FRcD+RUXA/kZGwP5MTMP+R0fB/kREwP5FRcD+RUXA/kVF
        wP5ubs7+8PD6//39/v+bm93+RkbA/kVFwP5FRcD+RUXA+kVFwGBFRcCdRUXA/UVFwP5ERMD+VFTF/sDA
        6v//////1NTw/8LC6v/7+/3//Pz+/7q66P9YWMf+Q0O//kVFwP5FRcD+dXXQ/rm55/+MjNj+S0vC/kRE
        wP5FRcD+RUXA/k5Ow/7Gxuv//////8XF6/9WVsb+RETA/kVFwP5FRcD9RUXAnUVFwMpFRcD9RUXA/kND
        v/5hYcn+3t70//////+cnN7+W1vI/rq65//6+v3/+/v+/7e35/9aWsf+Q0O//nl50v7g4PT///////Dw
        +v+Wltv+SUnC/kVFwP5FRcD+SEjB/piY3P7/////4+P2/2Njyv5DQ7/+RUXA/kVFwP1FRcDKRUXA6UVF
        wP5FRcD+QkK//mlpzP7w8Pr//v7//39/1P5DQ7/+WlrH/ru76P/7+/7/+vr9/7a25v6MjNj+3d30////
        ///+/v////////Dw+v+UlNv/SkrC/kVFwP5ERMD+fHzT/v7+///29vz/a2vN/kJCv/5FRcD+RUXA/kVF
        wOlFRcD4RUXA/kVFwP5CQr/+bGzN/vf3/P/+/v//dnbR/kNDv/5DQ7/+WVnH/r6+6f/8/P7/+vr9//Pz
        +///////6ur4/6ys4//Y2PL//////+/v+v+UlNv/SUnB/kFBv/5wcM7+/f3+//39/v9ubs7+QkK//kVF
        wP5FRcD+RUXA+EVFwPhFRcD+RUXA/kJCv/5qasz+8/P7//7+//97e9L+RETA/kVFwP5ERMD+WFjH/sDA
        6f/9/f7//////+7u+f+Pj9n/SkrC/nNz0P7a2vP//////+/v+f+Rkdr+R0fB/nV10P7+/v//+fn9/2xs
        zf5CQr/+RUXA/kVFwP5FRcD4RUXA6UVFwP5FRcD+Q0O//mNjyv7j4/b//////5SU2/5HR8H+RUXA/kVF
        wP5ERMD+XFzI/ra25v/W1vH/j4/Z/0lJwf5FRcD+RUXA/nV10P7c3PP//////+zs+f9wcM7+jIzY/v//
        ///p6ff/ZWXL/kNDv/5FRcD+RUXA/kVFwOlFRcDKRUXA/UVFwP5ERMD+V1fG/sjI7P//////v7/p/01N
        w/5FRcD+RUXA/kVFwP5ERMD+U1PF/mJiyv5JScH+RETA/kVFwP5FRcD+RUXA/nZ20f7a2vP/5+f3/3R0
        0P60tOb//////83N7v9aWsf+Q0O//kVFwP5FRcD9RUXAykVFwJ1FRcD9RUXA/kVFwP5HR8H+oKDf/v7+
        ///s7Pn/Z2fM/kREwP5FRcD+RUXA/kVFwP5ERMD+Q0O//kVFwP5FRcD+RUXA/kVFwP5FRcD+RkbA/mBg
        yf5lZcv+Z2fL/ufn9//+/v//pqbh/klJwv5ERMD+RUXA/kVFwP1FRcCdRUXAYEVFwPpFRcD+RUXA/kJC
        v/50dND+6Oj3//7+//+wsOT/S0vC/kREwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP5FRcD+Q0O//kZGwf6np+H//Pz+/+vr+P94eNH+QkK//kVFwP5FRcD+RUXA+kVFwGBFRcAtRUXA10VF
        wP9FRcD+RETA/k1Nw/6ysuX//Pz+/+/v+v+IiNf+RkbA/kREwP5FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP5FRcD+fn7T/uvr+P/9/f7/t7fn/09Pw/5ERMD+RUXA/kVFwP9FRcDXRUXALUVF
        wAtFRcCNRUXA/0VFwP5FRcD+Q0O//mhozP7b2/P//////+Tk9v+CgtX+SUnB/kREwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP5ERMD+SEjB/nt70v7e3vT//////9/f9P9sbM3+Q0O//kVFwP5FRcD+RUXA/0VF
        wI1FRcALRUXAAEVFwEFFRcDcRUXA/0VFwP5FRcD+RUXA/n9/0/7q6vj//////+zs+f+mpuH/Xl7J/ktL
        wv5GRsD+RETA/kNDv/5GRsD+S0vC/llZx/6cnN7+6Oj3///////s7Pn/g4PV/kZGwP5FRcD+RUXA/kVF
        wP9FRcDdRUXAQUVFwABFRcAARUXABUVFwIZFRcD6RUXA/0VFwP5FRcD+SEjB/oKC1P7h4fX///////z8
        /v/l5fb/s7Pl/42N2P56etL+eHjR/oiI1/6srOP/4OD1//v7/v//////5OT2/4aG1v5ISMH+RUXA/kVF
        wP5FRcD/RUXA+kVFwIdFRcAGRUXAAAAAAABFRcAARUXAIUVFwLlFRcD+RUXA/kVFwP5FRcD+RkbA/nBw
        zv6+vun/8vL6//////////////////7+///+/v///v7/////////////8/P7/8HB6v9zc9D+R0fB/kVF
        wP5FRcD+RUXA/kVFwP5FRcC5RUXAIkVFwAAAAAAAAAAAAAAAAABFRcAARUXAOkVFwM5FRcD+RUXA/kVF
        wP5FRcD+Q0O//lNTxf6AgNT+sLDk/9bW8f/v7/r/+vr+//v7/v/w8Pr/19fx/7Ky5f+CgtT+VVXF/kND
        v/5FRcD+RUXA/kVFwP5FRcD+RUXAzkVFwDpFRcAAAAAAAAAAAAAAAAAAAAAAAEVFwABFRcAARUXAREVF
        wM9FRcD+RUXA/0VFwP5FRcD+RETA/kJCv/5NTcP+XV3I/mhozP5tbc7+bW3O/mhozP5eXsj+Tk7D/kJC
        v/5ERMD+RUXA/kVFwP5FRcD/RUXA/kVFwM9FRcBERUXAAEVFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVF
        wABFRcABRUXAOkVFwLhFRcD5RUXA/0VFwP5FRcD+RUXA/kREwP5DQ7/+QkK//kJCv/5CQr/+QkK//kND
        v/5ERMD+RUXA/kVFwP5FRcD+RUXA/0VFwPlFRcC5RUXAOkVFwAFFRcAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEVFwABFRcAARUXAIUVFwIVFRcDcRUXA/0VFwP9FRcD+RUXA/kVFwP5FRcD+RUXA/kVF
        wP5FRcD+RUXA/kVFwP5FRcD+RUXA/0VFwP9FRcDcRUXAhUVFwCFFRcAARUXAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFRcAARUXABUVFwEBFRcCMRUXA1kVFwPpFRcD9RUXA/UVF
        wP5FRcD+RUXA/kVFwP5FRcD9RUXA/UVFwPpFRcDWRUXAjEVFwEBFRcAFRUXAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFRcAARUXAAEVFwAtFRcAtRUXAYEVF
        wJ1FRcDKRUXA6UVFwPhFRcD4RUXA6UVFwMpFRcCdRUXAYEVFwC1FRcALRUXAAEVFwAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/4AAAf8AAAD+AAAAfgAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH4AAAB/AAAA/4AAAf/gAAf/+AAf8=
</value>
  </data>
</root>